#+title: JCC: A C compiler written in Julia

* Goal

Having a fully [[http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf][compliant]] C99 compiler, written completely in Julia.

I am doing this to get more experience of Julia and assembly, and to
perfect my knowledge of the inner workings of the C language. It is
also useful to familiarize handling such a large scale project.

My main inspiration is Ghuloum's renowned paper "[[http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf][An Incremental
Approach to Compiler Construction]]", showing a simple, step by step
guide on how to build a Scheme compiler from scratch.

* Current state

To simplify debugging, and dealing with ELF and instruction encoding,
the compiler outputs human-readable assembly in a text file. AT&T
syntax is used, and a x86-64 architecture is implied. It can be
assembled with =as= and =ld= ; an assembler will later be implemented.

For now, only basic arithmetic, and variable manipulation is
implemented from parsing to assembly generation. A program like the
following can be compiled correctly:
#+begin_src c
  int main()
  {
      int a = 1;
      int b;
      if(a == 0) b = 1;
      else { b = 41; }
      return a + b;
  }
#+end_src

Even though 95% of the grammar is parsed, important features such as
type checking, and the preprocessor are currently lacking. Stay tuned :)

* Running

Requirements:
- a x86 64 Linux machine
- Julia

Running tests:
#+begin_src sh
  julia -i test.jl
#+end_src
